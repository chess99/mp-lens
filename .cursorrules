# Development Principles

## Fundamental Approach

- **Analyze First, Modify Later**: Understand the problem thoroughly before making any changes. Establish facts and standards before deciding on a modification approach.
- **Address Root Causes**: Focus on understanding the underlying issues rather than just treating symptoms.
- **Establish Patterns Over Exceptions**: Create general rules and patterns instead of writing special case code for each exception.

## User Interface Language Requirement

- **User-Facing Output in Chinese**: All user interface elements, including command-line outputs and prompts visible to users, must use Chinese. This ensures a consistent and localized user experience.

## Problem-Solving Methodology

1. Analyze the problem thoroughly
2. Determine the optimal solution strategy
3. Implement changes methodically
4. Verify through testing

## Testing Philosophy

- **Use Tests as Tools, Not Constraints**: Let tests guide development without being constrained by unreasonable test expectations.
- **Critically Evaluate Tests**: Assess whether tests reflect actual requirements or legacy conventions.
- **Verification Process**:
  - Run specific tests related to your changes first
  - Then run the complete test suite to ensure no regressions

## Documentation and Synchronization

- **Keep Documentation Updated**: Ensure documentation and code comments stay synchronized with code changes.

## Deep Problem Solving Protocol

When a bug persists after two adjustment attempts, activate systematic thinking mode:

1. Perform root cause analysis
2. Formulate hypotheses
3. Design methods to validate these hypotheses
4. Develop three distinct solutions with detailed pros and cons for each
5. Allow stakeholders to select the most appropriate solution based on context

# Rules for AI behavior

# Code Style

- Remove commented-out code instead of leaving it.
